diff -rupNEZbB oryginalne-zrodla/usr/src/include/unistd.h moje-rozwiazanie/usr/src/include/unistd.h
--- oryginalne-zrodla/usr/src/include/unistd.h	2022-05-28 09:32:18.018024959 +0200
+++ moje-rozwiazanie/usr/src/include/unistd.h	2022-05-29 17:20:56.558603026 +0200
@@ -411,5 +411,8 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+/* so_2022 */
+int set_bucket(int bucket_nr);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupNEZbB oryginalne-zrodla/usr/src/lib/libc/misc/Makefile.inc moje-rozwiazanie/usr/src/lib/libc/misc/Makefile.inc
--- oryginalne-zrodla/usr/src/lib/libc/misc/Makefile.inc	2022-05-28 09:32:17.868024960 +0200
+++ moje-rozwiazanie/usr/src/lib/libc/misc/Makefile.inc	2022-05-29 17:20:56.558603026 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c set_bucket.c
diff -rupNEZbB oryginalne-zrodla/usr/src/lib/libc/misc/set_bucket.c moje-rozwiazanie/usr/src/lib/libc/misc/set_bucket.c
--- oryginalne-zrodla/usr/src/lib/libc/misc/set_bucket.c	1970-01-01 01:00:00.000000000 +0100
+++ moje-rozwiazanie/usr/src/lib/libc/misc/set_bucket.c	2022-05-29 17:20:56.558603026 +0200
@@ -0,0 +1,30 @@
+#include <lib.h>
+#include <minix/rs.h>
+
+int get_pm_endpt(endpoint_t *pt)
+{
+    return minix_rs_lookup("pm", pt);
+}
+
+
+int set_bucket(int bucket_nr)
+/* so_2022 */
+{
+    endpoint_t pm_pt;
+    message m;
+
+    m.m_pm_sched_scheduling_set_bucket.endpoint = getpid();
+    m.m_pm_sched_scheduling_set_bucket.new_bucket = bucket_nr;
+
+    if (get_pm_endpt(&pm_pt) != 0)
+    {
+        errno = ENOSYS;
+        return -1;
+    }
+
+    int err = _syscall(pm_pt, PM_SET_BUCKET, &m);
+    if(err != 0)
+        return err;
+    return 0;
+
+}
\ No newline at end of file
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/include/minix/callnr.h moje-rozwiazanie/usr/src/minix/include/minix/callnr.h
--- oryginalne-zrodla/usr/src/minix/include/minix/callnr.h	2022-05-28 09:32:17.958024959 +0200
+++ moje-rozwiazanie/usr/src/minix/include/minix/callnr.h	2022-05-29 17:20:56.548603026 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_SET_BUCKET		(PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/include/minix/com.h moje-rozwiazanie/usr/src/minix/include/minix/com.h
--- oryginalne-zrodla/usr/src/minix/include/minix/com.h	2022-05-28 09:32:17.958024959 +0200
+++ moje-rozwiazanie/usr/src/minix/include/minix/com.h	2022-05-29 17:20:56.548603026 +0200
@@ -763,6 +763,7 @@
 #define SCHEDULING_STOP		(SCHEDULING_BASE+3)
 #define SCHEDULING_SET_NICE	(SCHEDULING_BASE+4)
 #define SCHEDULING_INHERIT	(SCHEDULING_BASE+5)
+#define SCHEDULING_SET_BUCKET	(SCHEDULING_BASE+6)
 
 /*===========================================================================*
  *              Messages for USB                                             *
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/include/minix/config.h moje-rozwiazanie/usr/src/minix/include/minix/config.h
--- oryginalne-zrodla/usr/src/minix/include/minix/config.h	2022-05-28 09:32:17.958024959 +0200
+++ moje-rozwiazanie/usr/src/minix/include/minix/config.h	2022-05-29 17:20:56.548603026 +0200
@@ -56,16 +56,22 @@
 /* Max. number of IRQs that can be assigned to a process */
 #define NR_IRQ	16
 
+/* buckets constants */
+#define BUCKET_Q 8       /* user processes priority */
+#define NR_BUCKETS 10    /* buckets count */
+#define DEFAULT_BUCKET 0 /* default bucket number */
+/* 7 is first queue of buckets, system processes has priority 0 ... 6, user are in queues 7 .. 16 */
+/* each queue corresponds to each bucket */
+#define FIRST_BUCKET_QUEUE 7 
+
 /* Scheduling priorities. Values must start at zero (highest
  * priority) and increment.
  */
-#define NR_SCHED_QUEUES   16	/* MUST equal minimum priority + 1 */
+#define NR_SCHED_QUEUES   17	/* MUST equal minimum priority + 1 */ /* 0 ... 6 for system , 7 .. 16 for user buckets */
 #define TASK_Q		   0	/* highest, used for kernel tasks */
-#define MAX_USER_Q  	   0    /* highest priority for user processes */   
-#define USER_Q  	  ((MIN_USER_Q - MAX_USER_Q) / 2 + MAX_USER_Q) /* default
-						(should correspond to nice 0) */
-#define MIN_USER_Q	  (NR_SCHED_QUEUES - 1)	/* minimum priority for user
-						   processes */
+#define MAX_USER_Q  	   BUCKET_Q    /* highest priority for user processes */   
+#define USER_Q  	  BUCKET_Q /* default */
+#define MIN_USER_Q	  BUCKET_Q	/* minimum priority for user processes */
 /* default scheduling quanta */
 #define USER_QUANTUM 200
 
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/include/minix/ipc.h moje-rozwiazanie/usr/src/minix/include/minix/ipc.h
--- oryginalne-zrodla/usr/src/minix/include/minix/ipc.h	2022-05-28 09:32:17.958024959 +0200
+++ moje-rozwiazanie/usr/src/minix/include/minix/ipc.h	2022-05-29 17:20:56.548603026 +0200
@@ -978,8 +978,9 @@ typedef struct {
 	int priority;
 	int quantum;
 	int cpu;
+	int bucket;
 
-	uint8_t padding[36];
+	uint8_t padding[32];
 } mess_lsys_krn_schedctl;
 _ASSERT_MSG_SIZE(mess_lsys_krn_schedctl);
 
@@ -988,8 +989,9 @@ typedef struct {
 	int quantum;
 	int priority;
 	int cpu;
+	int bucket;
 
-	uint8_t padding[40];
+	uint8_t padding[36];
 } mess_lsys_krn_schedule;
 _ASSERT_MSG_SIZE(mess_lsys_krn_schedule);
 
@@ -1581,6 +1583,14 @@ _ASSERT_MSG_SIZE(mess_pm_lsys_sigs_signa
 
 typedef struct {
 	endpoint_t endpoint;
+	uint32_t new_bucket;
+
+	uint8_t padding[48];
+} mess_pm_sched_scheduling_set_bucket;
+_ASSERT_MSG_SIZE(mess_pm_sched_scheduling_set_bucket);
+
+typedef struct {
+	endpoint_t endpoint;
 	uint32_t maxprio;
 
 	uint8_t padding[48];
@@ -2207,6 +2217,7 @@ typedef struct {
 		mess_pm_lsys_getepinfo	m_pm_lsys_getepinfo;
 		mess_pm_lsys_getprocnr	m_pm_lsys_getprocnr;
 		mess_pm_lsys_sigs_signal m_pm_lsys_sigs_signal;
+		mess_pm_sched_scheduling_set_bucket m_pm_sched_scheduling_set_bucket;
 		mess_pm_sched_scheduling_set_nice m_pm_sched_scheduling_set_nice;
 		mess_readclock_lc_rtcdev m_readclock_lc_rtcdev;
 		mess_rs_init		m_rs_init;
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/include/minix/syslib.h moje-rozwiazanie/usr/src/minix/include/minix/syslib.h
--- oryginalne-zrodla/usr/src/minix/include/minix/syslib.h	2022-05-28 09:32:17.958024959 +0200
+++ moje-rozwiazanie/usr/src/minix/include/minix/syslib.h	2022-05-29 17:20:56.548603026 +0200
@@ -38,9 +38,11 @@ int sys_exit(void);
 int sys_trace(int req, endpoint_t proc_ep, long addr, long *data_p);
 
 int sys_schedule(endpoint_t proc_ep, int priority, int quantum, int
-	cpu);
+	cpu, int bucket);
+/* so_2022 */
 int sys_schedctl(unsigned flags, endpoint_t proc_ep, int priority, int
-	quantum, int cpu);
+	quantum, int cpu, int bucket);
+/* so_2022 */
 
 /* Shorthands for sys_runctl() system call. */
 #define sys_stop(proc_ep) sys_runctl(proc_ep, RC_STOP, 0)
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/kernel/proc.c moje-rozwiazanie/usr/src/minix/kernel/proc.c
--- oryginalne-zrodla/usr/src/minix/kernel/proc.c	2022-05-28 09:32:17.968024959 +0200
+++ moje-rozwiazanie/usr/src/minix/kernel/proc.c	2022-05-29 17:20:56.518603026 +0200
@@ -60,7 +60,9 @@ static int deadlock(int function, regist
 static int try_async(struct proc *caller_ptr);
 static int try_one(struct proc *src_ptr, struct proc *dst_ptr);
 static struct proc * pick_proc(void);
+/* so_2020 */
 static void enqueue_head(struct proc *rp);
+/* so_2020 */
 
 /* all idles share the same idle_priv structure */
 static struct priv idle_priv;
@@ -1526,6 +1528,7 @@ asyn_error:
 void enqueue(
   register struct proc *rp	/* this process is now runnable */
 )
+/* so_2020 */
 {
 /* Add 'rp' to one of the queues of runnable processes.  This function is 
  * responsible for inserting a process into one of the scheduling queues. 
@@ -1535,7 +1538,12 @@ void enqueue(
  * This function can be used x-cpu as it always uses the queues of the cpu the
  * process is assigned to.
  */
-  int q = rp->p_priority;	 		/* scheduling queue to use */
+  
+  /* scheduling queue to use */
+  /* if it is user process, then we use bucket number to assign queue */
+  const int q = rp->p_priority == BUCKET_Q ?
+	rp->p_bucket + FIRST_BUCKET_QUEUE : rp->p_priority;
+  
   struct proc **rdy_head, **rdy_tail;
   
   assert(proc_is_runnable(rp));
@@ -1599,8 +1607,12 @@ void enqueue(
  * fair
  */
 static void enqueue_head(struct proc *rp)
+/* so_2020 */
 {
-  const int q = rp->p_priority;	 		/* scheduling queue to use */
+  /* scheduling queue to use */
+  /* if it is user process, then we use bucket number to assign queue */
+  const int q = rp->p_priority == BUCKET_Q ?
+	rp->p_bucket + FIRST_BUCKET_QUEUE : rp->p_priority;
 
   struct proc **rdy_head, **rdy_tail;
 
@@ -1645,6 +1657,7 @@ static void enqueue_head(struct proc *rp
  *				dequeue					     * 
  *===========================================================================*/
 void dequeue(struct proc *rp)
+/* so_2020 */
 /* this process is no longer runnable */
 {
 /* A process must be removed from the scheduling queues, for example, because
@@ -1654,7 +1667,12 @@ void dequeue(struct proc *rp)
  * This function can operate x-cpu as it always removes the process from the
  * queue of the cpu the process is currently assigned to.
  */
-  int q = rp->p_priority;		/* queue to use */
+
+  /* scheduling queue to use */
+  /* if it is user process, then we use bucket number to assign queue */
+  const int q = rp->p_priority == BUCKET_Q ?
+	rp->p_bucket + FIRST_BUCKET_QUEUE : rp->p_priority;
+	
   struct proc **xpp;			/* iterate over queue */
   struct proc *prev_xp;
   u64_t tsc, tsc_delta;
@@ -1712,6 +1730,7 @@ void dequeue(struct proc *rp)
  *				pick_proc				     * 
  *===========================================================================*/
 static struct proc * pick_proc(void)
+/* so_2020 */
 {
 /* Decide who to run now.  A new process is selected an returned.
  * When a billable process is selected, record it in 'bill_ptr', so that the 
@@ -1722,13 +1741,20 @@ static struct proc * pick_proc(void)
   register struct proc *rp;			/* process to run */
   struct proc **rdy_head;
   int q;				/* iterate over queues */
+  static int current_bucket; /* current bucket to choose if there are no system processes to run */
+  /* it must be static to preserve this information across calls */
+
+  /* First 0 .. 6 qeueues are for system processes, and next 10 queues corresponds to buckets
+	we preserve current_bucket across function calls and pick process from next bucket if available */
 
   /* Check each of the scheduling queues for ready processes. The number of
    * queues is defined in proc.h, and priorities are set in the task table.
    * If there are no processes ready to run, return NULL.
    */
+
+  /* check queuees 0 ... 6 (system processes) */
   rdy_head = get_cpulocal_var(run_q_head);
-  for (q=0; q < NR_SCHED_QUEUES; q++) {	
+  for (q=0; q < FIRST_BUCKET_QUEUE; q++) {	
 	if(!(rp = rdy_head[q])) {
 		TRACE(VF_PICKPROC, printf("cpu %d queue %d empty\n", cpuid, q););
 		continue;
@@ -1738,6 +1764,26 @@ static struct proc * pick_proc(void)
 		get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
 	return rp;
   }
+
+	/* check buckets */
+	for(int i = 0; i < NR_BUCKETS; i++ )
+	{
+		int current_queue_to_check = (current_bucket + i) % NR_BUCKETS + FIRST_BUCKET_QUEUE;
+		int q = current_queue_to_check;
+		TRACE(VF_PICKPROC, printf("cpu %d bucket queue %d check\n", cpuid, q););
+		
+
+		if(!(rp = rdy_head[q])) {
+			TRACE(VF_PICKPROC, printf("cpu %d bucket queue %d empty\n", cpuid, q););
+			continue;
+		}
+		assert(proc_is_runnable(rp));
+		if (priv(rp)->s_flags & BILLABLE)	 	
+			get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
+		current_bucket = (rp->p_bucket + 1) % NR_BUCKETS;
+		return rp;
+  	}
+
   return NULL;
 }
 
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/kernel/proc.h moje-rozwiazanie/usr/src/minix/kernel/proc.h
--- oryginalne-zrodla/usr/src/minix/kernel/proc.h	2022-05-28 09:32:17.968024959 +0200
+++ moje-rozwiazanie/usr/src/minix/kernel/proc.h	2022-05-29 17:20:56.518603026 +0200
@@ -28,6 +28,7 @@ struct proc {
   volatile u32_t p_misc_flags;	/* flags that do not suspend the process */
 
   char p_priority;		/* current process priority */
+  char p_bucket;			/* current process bucket */
   u64_t p_cpu_time_left;	/* time left to use the cpu */
   unsigned p_quantum_size_ms;	/* assigned time quantum in ms
 				   FIXME remove this */
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/kernel/proto.h moje-rozwiazanie/usr/src/minix/kernel/proto.h
--- oryginalne-zrodla/usr/src/minix/kernel/proto.h	2022-05-28 09:32:17.968024959 +0200
+++ moje-rozwiazanie/usr/src/minix/kernel/proto.h	2022-05-29 17:20:56.528603026 +0200
@@ -99,7 +99,8 @@ void system_init(void);
 void clear_endpoint(struct proc *rc);
 void clear_ipc_refs(struct proc *rc, int caller_ret);
 void kernel_call_resume(struct proc *p);
-int sched_proc(struct proc *rp, int priority, int quantum, int cpu);
+int sched_proc(struct proc *rp, int priority, int quantum, int cpu, int bucket);
+/* so_2022 */
 
 /* system/do_vtimer.c */
 void vtimer_check(struct proc *rp);
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/kernel/system/do_schedctl.c moje-rozwiazanie/usr/src/minix/kernel/system/do_schedctl.c
--- oryginalne-zrodla/usr/src/minix/kernel/system/do_schedctl.c	2022-05-28 09:32:17.968024959 +0200
+++ moje-rozwiazanie/usr/src/minix/kernel/system/do_schedctl.c	2022-05-29 17:20:56.528603026 +0200
@@ -5,10 +5,11 @@
  *			          do_schedctl			     *
  *===========================================================================*/
 int do_schedctl(struct proc * caller, message * m_ptr)
+/* so_2022 */
 {
 	struct proc *p;
 	uint32_t flags;
-	int priority, quantum, cpu;
+	int priority, quantum, cpu, bucket;
 	int proc_nr;
 	int r;
 
@@ -32,9 +33,10 @@ int do_schedctl(struct proc * caller, me
 		priority = m_ptr->m_lsys_krn_schedctl.priority;
 		quantum = m_ptr->m_lsys_krn_schedctl.quantum;
 		cpu = m_ptr->m_lsys_krn_schedctl.cpu;
+		bucket = -1;
 
 		/* Try to schedule the process. */
-		if((r = sched_proc(p, priority, quantum, cpu) != OK))
+		if((r = sched_proc(p, priority, quantum, cpu, bucket) != OK))
 			return r;
 		p->p_scheduler = NULL;
 	} else {
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/kernel/system/do_schedule.c moje-rozwiazanie/usr/src/minix/kernel/system/do_schedule.c
--- oryginalne-zrodla/usr/src/minix/kernel/system/do_schedule.c	2022-05-28 09:32:17.968024959 +0200
+++ moje-rozwiazanie/usr/src/minix/kernel/system/do_schedule.c	2022-05-29 17:20:56.528603026 +0200
@@ -6,10 +6,11 @@
  *				do_schedule				     *
  *===========================================================================*/
 int do_schedule(struct proc * caller, message * m_ptr)
+/* so_2022 */
 {
 	struct proc *p;
 	int proc_nr;
-	int priority, quantum, cpu;
+	int priority, quantum, cpu, bucket;
 
 	if (!isokendpt(m_ptr->m_lsys_krn_schedule.endpoint, &proc_nr))
 		return EINVAL;
@@ -24,6 +25,7 @@ int do_schedule(struct proc * caller, me
 	priority = m_ptr->m_lsys_krn_schedule.priority;
 	quantum = m_ptr->m_lsys_krn_schedule.quantum;
 	cpu = m_ptr->m_lsys_krn_schedule.cpu;
+	bucket = m_ptr->m_lsys_krn_schedule.bucket;
 
-	return sched_proc(p, priority, quantum, cpu);
+	return sched_proc(p, priority, quantum, cpu, bucket);
 }
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/kernel/system.c moje-rozwiazanie/usr/src/minix/kernel/system.c
--- oryginalne-zrodla/usr/src/minix/kernel/system.c	2022-05-28 09:32:17.968024959 +0200
+++ moje-rozwiazanie/usr/src/minix/kernel/system.c	2022-05-29 17:20:56.528603026 +0200
@@ -621,7 +621,9 @@ void kernel_call_resume(struct proc *cal
 int sched_proc(struct proc *p,
 			int priority,
 			int quantum,
-			int cpu)
+			int cpu,
+      int bucket)
+/* so_2022 */
 {
 	/* Make sure the values given are within the allowed range.*/
 	if ((priority < TASK_Q && priority != -1) || priority > NR_SCHED_QUEUES)
@@ -630,6 +632,11 @@ int sched_proc(struct proc *p,
 	if (quantum < 1 && quantum != -1)
 		return(EINVAL);
 
+  if((bucket < 0 || bucket >= NR_BUCKETS) && bucket != -1)
+  {
+    return(EINVAL);
+  }
+
 #ifdef CONFIG_SMP
 	if ((cpu < 0 && cpu != -1) || (cpu > 0 && (unsigned) cpu >= ncpus))
 		return(EINVAL);
@@ -665,6 +672,9 @@ int sched_proc(struct proc *p,
 		p->p_quantum_size_ms = quantum;
 		p->p_cpu_time_left = ms_2_cpu_time(quantum);
 	}
+  if (bucket != -1) {
+    p->p_bucket = bucket;
+  }
 #ifdef CONFIG_SMP
 	if (cpu != -1)
 		p->p_cpu = cpu;
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/kernel/system.h moje-rozwiazanie/usr/src/minix/kernel/system.h
--- oryginalne-zrodla/usr/src/minix/kernel/system.h	2022-05-28 09:32:17.968024959 +0200
+++ moje-rozwiazanie/usr/src/minix/kernel/system.h	2022-05-29 17:20:56.528603026 +0200
@@ -201,7 +201,9 @@ int do_setmcontext(struct proc * caller,
 #endif
 
 int do_schedule(struct proc * caller, message *m_ptr);
+/* so_2022 */
 int do_schedctl(struct proc * caller, message *m_ptr);
+/* so_2022 */
 
 int do_statectl(struct proc * caller, message *m_ptr);
 #if ! USE_STATECTL
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/lib/libsys/sched_start.c moje-rozwiazanie/usr/src/minix/lib/libsys/sched_start.c
--- oryginalne-zrodla/usr/src/minix/lib/libsys/sched_start.c	2022-05-28 09:32:17.988024959 +0200
+++ moje-rozwiazanie/usr/src/minix/lib/libsys/sched_start.c	2022-05-29 17:20:56.548603026 +0200
@@ -54,6 +54,7 @@ int sched_start(endpoint_t scheduler_e,
 			int quantum,
 			int cpu,
 			endpoint_t *newscheduler_e)
+/* so_2022 */
 {
 	int rv;
 	message m;
@@ -73,7 +74,7 @@ int sched_start(endpoint_t scheduler_e,
 	/* The KERNEL must schedule this process. */
 	if(scheduler_e == KERNEL) {
 		if ((rv = sys_schedctl(SCHEDCTL_FLAG_KERNEL, 
-			schedulee_e, maxprio, quantum, cpu)) != OK) {
+			schedulee_e, maxprio, quantum, cpu, -1)) != OK) {
 			return rv;
 		}
 		*newscheduler_e = scheduler_e;
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/lib/libsys/sys_schedctl.c moje-rozwiazanie/usr/src/minix/lib/libsys/sys_schedctl.c
--- oryginalne-zrodla/usr/src/minix/lib/libsys/sys_schedctl.c	2022-05-28 09:32:17.988024959 +0200
+++ moje-rozwiazanie/usr/src/minix/lib/libsys/sys_schedctl.c	2022-05-29 17:20:56.548603026 +0200
@@ -1,7 +1,8 @@
 #include "syslib.h"
 
 int sys_schedctl(uint32_t flags, endpoint_t proc_ep, int priority, int quantum,
-	int cpu)
+	int cpu, int bucket)
+/* so_2022 */
 {
 	message m;
 
@@ -10,6 +11,7 @@ int sys_schedctl(uint32_t flags, endpoin
 	m.m_lsys_krn_schedctl.priority = priority;
 	m.m_lsys_krn_schedctl.quantum = quantum;
 	m.m_lsys_krn_schedctl.cpu = cpu;
+	m.m_lsys_krn_schedctl.bucket = bucket;
 
 	return(_kernel_call(SYS_SCHEDCTL, &m));
 }
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/lib/libsys/sys_schedule.c moje-rozwiazanie/usr/src/minix/lib/libsys/sys_schedule.c
--- oryginalne-zrodla/usr/src/minix/lib/libsys/sys_schedule.c	2022-05-28 09:32:17.988024959 +0200
+++ moje-rozwiazanie/usr/src/minix/lib/libsys/sys_schedule.c	2022-05-29 17:20:56.548603026 +0200
@@ -3,7 +3,9 @@
 int sys_schedule(endpoint_t proc_ep,
 			int priority,
 			int quantum,
-			int cpu)
+			int cpu,
+			int bucket)
+/* so_2022 */
 {
 	message m;
 
@@ -11,5 +13,6 @@ int sys_schedule(endpoint_t proc_ep,
 	m.m_lsys_krn_schedule.priority = priority;
 	m.m_lsys_krn_schedule.quantum  = quantum;
 	m.m_lsys_krn_schedule.cpu = cpu;
+	m.m_lsys_krn_schedule.bucket = bucket;
 	return(_kernel_call(SYS_SCHEDULE, &m));
 }
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/servers/pm/proto.h moje-rozwiazanie/usr/src/minix/servers/pm/proto.h
--- oryginalne-zrodla/usr/src/minix/servers/pm/proto.h	2022-05-28 09:32:17.998024959 +0200
+++ moje-rozwiazanie/usr/src/minix/servers/pm/proto.h	2022-05-29 17:20:56.538603026 +0200
@@ -51,6 +51,9 @@ int do_getrusage(void);
 void sched_init(void);
 int sched_start_user(endpoint_t ep, struct mproc *rmp);
 int sched_nice(struct mproc *rmp, int nice);
+/* so_2022 */
+int do_set_bucket(void);
+/* so 2022 */
 
 /* profile.c */
 int do_sprofile(void);
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/servers/pm/schedule.c moje-rozwiazanie/usr/src/minix/servers/pm/schedule.c
--- oryginalne-zrodla/usr/src/minix/servers/pm/schedule.c	2022-05-28 09:32:17.998024959 +0200
+++ moje-rozwiazanie/usr/src/minix/servers/pm/schedule.c	2022-05-29 17:20:56.538603026 +0200
@@ -87,24 +87,36 @@ int sched_start_user(endpoint_t ep, stru
  *				sched_nice				     *
  *===========================================================================*/
 int sched_nice(struct mproc *rmp, int nice)
+/* so_2022 */
 {
-	int rv;
-	message m;
-	unsigned maxprio;
-
 	/* If the kernel is the scheduler, we don't allow messing with the
 	 * priority. If you want to control process priority, assign the process
 	 * to a user-space scheduler */
 	if (rmp->mp_scheduler == KERNEL || rmp->mp_scheduler == NONE)
 		return (EINVAL);
 
-	if ((rv = nice_to_priority(nice, &maxprio)) != OK) {
-		return rv;
-	}
+	/* If is is user process, then we do not allow changing priorities */
+	return (ENOSYS);
+}
+
+int do_set_bucket(void)
+/* so_2022 */
+{
+	int rv;
+	message m;
+	struct mproc *rmp = mp;
+
+	int arg_who = m_in.m_pm_sched_scheduling_set_bucket.endpoint;
+	if ((rmp = find_proc(arg_who)) == NULL)
+		return(ESRCH);
+	int bucket = m_in.m_pm_sched_scheduling_set_bucket.new_bucket;
+
+	if (rmp->mp_scheduler == KERNEL || rmp->mp_scheduler == NONE)
+		return (EPERM);
 
-	m.m_pm_sched_scheduling_set_nice.endpoint	= rmp->mp_endpoint;
-	m.m_pm_sched_scheduling_set_nice.maxprio	= maxprio;
-	if ((rv = _taskcall(rmp->mp_scheduler, SCHEDULING_SET_NICE, &m))) {
+	m.m_pm_sched_scheduling_set_bucket.endpoint	= rmp->mp_endpoint;
+	m.m_pm_sched_scheduling_set_bucket.new_bucket = bucket;
+	if ((rv = _taskcall(rmp->mp_scheduler, SCHEDULING_SET_BUCKET, &m))) {
 		return rv;
 	}
 
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/servers/pm/table.c moje-rozwiazanie/usr/src/minix/servers/pm/table.c
--- oryginalne-zrodla/usr/src/minix/servers/pm/table.c	2022-05-28 09:32:17.998024959 +0200
+++ moje-rozwiazanie/usr/src/minix/servers/pm/table.c	2022-05-29 17:20:56.548603026 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,		/* getsysinfo(2) */
+	CALL(PM_SET_BUCKET)	= do_set_bucket		/* do_set_bucket */
 };
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/servers/sched/main.c moje-rozwiazanie/usr/src/minix/servers/sched/main.c
--- oryginalne-zrodla/usr/src/minix/servers/sched/main.c	2022-05-28 09:32:17.998024959 +0200
+++ moje-rozwiazanie/usr/src/minix/servers/sched/main.c	2022-05-29 17:20:56.538603026 +0200
@@ -19,6 +19,7 @@ struct machine machine;		/* machine info
  *				main					     *
  *===========================================================================*/
 int main(void)
+/* so_2022 */
 {
 	/* Main routine of the scheduler. */
 	message m_in;	/* the incoming message itself is kept here. */
@@ -60,6 +61,9 @@ int main(void)
 		}
 
 		switch(call_nr) {
+		case SCHEDULING_SET_BUCKET:
+			result = do_set_bucket(&m_in);
+			break;
 		case SCHEDULING_INHERIT:
 		case SCHEDULING_START:
 			result = do_start_scheduling(&m_in);
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/servers/sched/proto.h moje-rozwiazanie/usr/src/minix/servers/sched/proto.h
--- oryginalne-zrodla/usr/src/minix/servers/sched/proto.h	2022-05-28 09:32:17.998024959 +0200
+++ moje-rozwiazanie/usr/src/minix/servers/sched/proto.h	2022-05-29 17:20:56.538603026 +0200
@@ -9,10 +9,16 @@ void setreply(int proc_nr, int result);
 
 /* schedule.c */
 int do_noquantum(message *m_ptr);
+/* so_2022 */
 int do_start_scheduling(message *m_ptr);
+/* so_2022 */
 int do_stop_scheduling(message *m_ptr);
+int do_set_bucket(message *m_ptr);
+/* so_2022 */
 int do_nice(message *m_ptr);
+/* so_2022 */
 void init_scheduling(void);
+/* so_2022 */
 
 /* utility.c */
 int no_sys(int who_e, int call_nr);
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/servers/sched/schedproc.h moje-rozwiazanie/usr/src/minix/servers/sched/schedproc.h
--- oryginalne-zrodla/usr/src/minix/servers/sched/schedproc.h	2022-05-28 09:32:17.998024959 +0200
+++ moje-rozwiazanie/usr/src/minix/servers/sched/schedproc.h	2022-05-29 17:20:56.538603026 +0200
@@ -30,6 +30,7 @@ EXTERN struct schedproc {
 	unsigned priority;		/* the process' current priority */
 	unsigned time_slice;		/* this process's time slice */
 	unsigned cpu;		/* what CPU is the process running on */
+	unsigned bucket;    /* which bucket this process is currently in */
 	bitchunk_t cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the
 								process allowed
 								to run on */
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/servers/sched/schedule.c moje-rozwiazanie/usr/src/minix/servers/sched/schedule.c
--- oryginalne-zrodla/usr/src/minix/servers/sched/schedule.c	2022-05-28 09:32:17.998024959 +0200
+++ moje-rozwiazanie/usr/src/minix/servers/sched/schedule.c	2022-05-29 17:20:56.538603026 +0200
@@ -11,6 +11,7 @@
 #include "schedproc.h"
 #include <assert.h>
 #include <minix/com.h>
+#include <minix/config.h> // for bucket constants
 #include <machine/archtypes.h>
 #include "kernel/proc.h" /* for queue constants */
 
@@ -21,19 +22,22 @@ static unsigned balance_timeout;
 
 static int schedule_process(struct schedproc * rmp, unsigned flags);
 static void balance_queues(minix_timer_t *tp);
+/* so_2022 */
 
 #define SCHEDULE_CHANGE_PRIO	0x1
 #define SCHEDULE_CHANGE_QUANTUM	0x2
 #define SCHEDULE_CHANGE_CPU	0x4
+#define SCHEDULE_CHANGE_BUCKET	0x8
 
 #define SCHEDULE_CHANGE_ALL	(	\
 		SCHEDULE_CHANGE_PRIO	|	\
 		SCHEDULE_CHANGE_QUANTUM	|	\
-		SCHEDULE_CHANGE_CPU		\
+		SCHEDULE_CHANGE_CPU		|   \
+		SCHEDULE_CHANGE_BUCKET		\
 		)
 
 #define schedule_process_local(p)	\
-	schedule_process(p, SCHEDULE_CHANGE_PRIO | SCHEDULE_CHANGE_QUANTUM)
+	schedule_process(p, SCHEDULE_CHANGE_PRIO | SCHEDULE_CHANGE_QUANTUM | SCHEDULE_CHANGE_BUCKET)
 #define schedule_process_migrate(p)	\
 	schedule_process(p, SCHEDULE_CHANGE_CPU)
 
@@ -88,6 +92,7 @@ static void pick_cpu(struct schedproc *
  *===========================================================================*/
 
 int do_noquantum(message *m_ptr)
+/* so_2022 */
 {
 	register struct schedproc *rmp;
 	int rv, proc_nr_n;
@@ -99,9 +104,6 @@ int do_noquantum(message *m_ptr)
 	}
 
 	rmp = &schedproc[proc_nr_n];
-	if (rmp->priority < MIN_USER_Q) {
-		rmp->priority += 1; /* lower priority */
-	}
 
 	if ((rv = schedule_process_local(rmp)) != OK) {
 		return rv;
@@ -141,6 +143,7 @@ int do_stop_scheduling(message *m_ptr)
  *				do_start_scheduling			     *
  *===========================================================================*/
 int do_start_scheduling(message *m_ptr)
+/* so_2022 */
 {
 	register struct schedproc *rmp;
 	int rv, proc_nr_n, parent_nr_n;
@@ -163,7 +166,7 @@ int do_start_scheduling(message *m_ptr)
 	/* Populate process slot */
 	rmp->endpoint     = m_ptr->m_lsys_sched_scheduling_start.endpoint;
 	rmp->parent       = m_ptr->m_lsys_sched_scheduling_start.parent;
-	rmp->max_priority = m_ptr->m_lsys_sched_scheduling_start.maxprio;
+	rmp->max_priority = MAX_USER_Q;
 	if (rmp->max_priority >= NR_SCHED_QUEUES) {
 		return EINVAL;
 	}
@@ -176,6 +179,7 @@ int do_start_scheduling(message *m_ptr)
 		   process scheduled, and the parent of itself. */
 		rmp->priority   = USER_Q;
 		rmp->time_slice = DEFAULT_USER_TIME_SLICE;
+		rmp->bucket		= schedproc[parent_nr_n].bucket;
 
 		/*
 		 * Since kernel never changes the cpu of a process, all are
@@ -195,8 +199,9 @@ int do_start_scheduling(message *m_ptr)
 		/* We have a special case here for system processes, for which
 		 * quanum and priority are set explicitly rather than inherited 
 		 * from the parent */
-		rmp->priority   = rmp->max_priority;
+		rmp->priority   = USER_Q;
 		rmp->time_slice = m_ptr->m_lsys_sched_scheduling_start.quantum;
+		rmp->bucket     = DEFAULT_BUCKET;
 		break;
 		
 	case SCHEDULING_INHERIT:
@@ -207,8 +212,9 @@ int do_start_scheduling(message *m_ptr)
 				&parent_nr_n)) != OK)
 			return rv;
 
-		rmp->priority = schedproc[parent_nr_n].priority;
+		rmp->priority = USER_Q;
 		rmp->time_slice = schedproc[parent_nr_n].time_slice;
+		rmp->bucket		= schedproc[parent_nr_n].bucket;
 		break;
 		
 	default: 
@@ -218,7 +224,7 @@ int do_start_scheduling(message *m_ptr)
 
 	/* Take over scheduling the process. The kernel reply message populates
 	 * the processes current priority and its time slice */
-	if ((rv = sys_schedctl(0, rmp->endpoint, 0, 0, 0)) != OK) {
+	if ((rv = sys_schedctl(0, rmp->endpoint, 0, 0, 0, 0)) != OK) {
 		printf("Sched: Error taking over scheduling for %d, kernel said %d\n",
 			rmp->endpoint, rv);
 		return rv;
@@ -256,54 +262,59 @@ int do_start_scheduling(message *m_ptr)
  *===========================================================================*/
 int do_nice(message *m_ptr)
 {
-	struct schedproc *rmp;
-	int rv;
-	int proc_nr_n;
-	unsigned new_q, old_q, old_max_q;
+	return 0;
+	// struct schedproc *rmp;
+	// int rv;
+	// int proc_nr_n;
+	// unsigned new_q, old_q, old_max_q;
+
+	// /* check who can send you requests */
+	// if (!accept_message(m_ptr))
+	// 	return EPERM;
+
+	// if (sched_isokendpt(m_ptr->m_pm_sched_scheduling_set_nice.endpoint, &proc_nr_n) != OK) {
+	// 	printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
+	// 	"%d\n", m_ptr->m_pm_sched_scheduling_set_nice.endpoint);
+	// 	return EBADEPT;
+	// }
+
+	// rmp = &schedproc[proc_nr_n];
+	// new_q = m_ptr->m_pm_sched_scheduling_set_nice.maxprio;
+	// if (new_q >= NR_SCHED_QUEUES) {
+	// 	return EINVAL;
+	// }
+
+	// /* Store old values, in case we need to roll back the changes */
+	// old_q     = rmp->priority;
+	// old_max_q = rmp->max_priority;
+
+	// /* Update the proc entry and reschedule the process */
+	// rmp->max_priority = rmp->priority = new_q;
+
+	// if ((rv = schedule_process_local(rmp)) != OK) {
+	// 	/* Something went wrong when rescheduling the process, roll
+	// 	 * back the changes to proc struct */
+	// 	rmp->priority     = old_q;
+	// 	rmp->max_priority = old_max_q;
+	// }
 
-	/* check who can send you requests */
-	if (!accept_message(m_ptr))
-		return EPERM;
-
-	if (sched_isokendpt(m_ptr->m_pm_sched_scheduling_set_nice.endpoint, &proc_nr_n) != OK) {
-		printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
-		"%d\n", m_ptr->m_pm_sched_scheduling_set_nice.endpoint);
-		return EBADEPT;
-	}
-
-	rmp = &schedproc[proc_nr_n];
-	new_q = m_ptr->m_pm_sched_scheduling_set_nice.maxprio;
-	if (new_q >= NR_SCHED_QUEUES) {
-		return EINVAL;
-	}
-
-	/* Store old values, in case we need to roll back the changes */
-	old_q     = rmp->priority;
-	old_max_q = rmp->max_priority;
-
-	/* Update the proc entry and reschedule the process */
-	rmp->max_priority = rmp->priority = new_q;
-
-	if ((rv = schedule_process_local(rmp)) != OK) {
-		/* Something went wrong when rescheduling the process, roll
-		 * back the changes to proc struct */
-		rmp->priority     = old_q;
-		rmp->max_priority = old_max_q;
-	}
-
-	return rv;
+	// return rv;
 }
 
 /*===========================================================================*
  *				schedule_process			     *
  *===========================================================================*/
 static int schedule_process(struct schedproc * rmp, unsigned flags)
+/* so_2022 */
 {
 	int err;
-	int new_prio, new_quantum, new_cpu;
+	int new_prio, new_quantum, new_cpu, new_bucket;
 
 	pick_cpu(rmp);
 
+	if(flags & SCHEDULE_CHANGE_BUCKET)	
+		new_bucket = rmp->bucket;
+
 	if (flags & SCHEDULE_CHANGE_PRIO)
 		new_prio = rmp->priority;
 	else
@@ -320,7 +331,7 @@ static int schedule_process(struct sched
 		new_cpu = -1;
 
 	if ((err = sys_schedule(rmp->endpoint, new_prio,
-		new_quantum, new_cpu)) != OK) {
+		new_quantum, new_cpu, new_bucket)) != OK) {
 		printf("PM: An error occurred when trying to schedule %d: %d\n",
 		rmp->endpoint, err);
 	}
@@ -334,10 +345,11 @@ static int schedule_process(struct sched
  *===========================================================================*/
 
 void init_scheduling(void)
+/* so_2022 */
 {
-	balance_timeout = BALANCE_TIMEOUT * sys_hz();
-	init_timer(&sched_timer);
-	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
+	// balance_timeout = BALANCE_TIMEOUT * sys_hz();
+	// init_timer(&sched_timer);
+	// set_timer(&sched_timer, balance_timeout, balance_queues, 0);
 }
 
 /*===========================================================================*
@@ -350,18 +362,48 @@ void init_scheduling(void)
  * and pulls them back up. This default policy will soon be changed.
  */
 static void balance_queues(minix_timer_t *tp)
+/* so_2022 */
+{
+	// struct schedproc *rmp;
+	// int proc_nr;
+
+	// for (proc_nr=0, rmp=schedproc; proc_nr < NR_PROCS; proc_nr++, rmp++) {
+	// 	if (rmp->flags & IN_USE) {
+	// 		if (rmp->priority > rmp->max_priority) {
+	// 			rmp->priority -= 1; /* increase priority */
+	// 			schedule_process_local(rmp);
+	// 		}
+	// 	}
+	// }
+
+	// set_timer(&sched_timer, balance_timeout, balance_queues, 0);
+}
+
+int do_set_bucket(message *m_ptr)
 {
-	struct schedproc *rmp;
-	int proc_nr;
+	register struct schedproc *rmp;
+	int proc_nr_n;
+	int rv;
 
-	for (proc_nr=0, rmp=schedproc; proc_nr < NR_PROCS; proc_nr++, rmp++) {
-		if (rmp->flags & IN_USE) {
-			if (rmp->priority > rmp->max_priority) {
-				rmp->priority -= 1; /* increase priority */
-				schedule_process_local(rmp);
+	if (sched_isokendpt(m_ptr->m_pm_sched_scheduling_set_bucket.endpoint, &proc_nr_n) != OK) {
+		printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
+	"%d\n", m_ptr->m_pm_sched_scheduling_set_bucket.endpoint);
+	return EBADEPT;
 			}
+	rmp = &schedproc[proc_nr_n];
+
+	assert(m_ptr->m_type == SCHEDULING_SET_BUCKET);
+
+	int old_bucket = rmp->bucket;
+	int new_bucket = m_ptr->m_pm_sched_scheduling_set_bucket.new_bucket;
+	if (new_bucket < 0 || new_bucket >= NR_BUCKETS) {
+		return EINVAL;
 		}
+	rmp->bucket = new_bucket;
+	if ((rv = schedule_process_local(rmp)) != OK) {
+		rmp->bucket     = old_bucket;
+		return rv;
 	}
 
-	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
+	return OK;
 }
